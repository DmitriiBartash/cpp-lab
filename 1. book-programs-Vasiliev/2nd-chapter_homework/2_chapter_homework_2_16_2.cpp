/*
Условие:
Пользователь вводит число от 1 до 10.
Программа проверяет, является ли это число числом Фибоначчи.
Числа Фибоначчи в этом диапазоне: 1, 2, 3, 5, 8
Используется оператор switch.
*/

#include <iostream>
#include <cmath>
using namespace std;

// Проверка, является ли n с полным квадратом
bool isPerfectSquare(long long n)
{
    long long root = static_cast<long long>(sqrt(n));
    return root * root == n;
}

// Проверка по математическому признаку Фибонначи
bool isFibonacci(int n)
{
    long long x = 5LL * n * n;
    return isPerfectSquare(x + 4) || isPerfectSquare(x - 4);
}

int main()
{
    int num;
    cout << "Enter any integer: ";
    cin >> num;

    if (isFibonacci(num))
        cout << num << " is a Fibonacci number." << endl;
    else
        cout << num << " is NOT a Fibonacci number." << endl;

    return 0;
}

/*
------------------------------------------------------------
Документация алгоритма: Проверка числа Фибоначчи по формуле
------------------------------------------------------------

Цель:
-----
Определить, является ли введённое целое число (положительное, ноль или отрицательное)
числом Фибоначчи, используя быстрый математический признак.

Математическая основа:
----------------------
Число `n` является числом Фибоначчи **тогда и только тогда**, когда одно из двух чисел:
    • 5 * n² + 4
    • 5 * n² - 4
является **точным квадратом** (имеет целый квадратный корень).

Это свойство вытекает из формулы Бине для чисел Фибоначчи и известно в математике
как способ проверки принадлежности числу Фибоначчи без генерации последовательности.

Пример:
-------
n = 5:
5 * 5² ± 4 = 125 + 4 = 129, 125 - 4 = 121 → 121 — точный квадрат ⇒ 5 — число Фибоначчи

Описание функций:
-----------------

1. bool isPerfectSquare(long long n):
   • Проверяет, является ли число `n` полным квадратом (√n — целое)
   • Использует `std::sqrt()` с преобразованием в `long long` и сравнение
   • Работает быстро и надёжно для значений в диапазоне 64-бит

2. bool isFibonacci(int n):
   • Вычисляет x = 5 * n² (5LL - перевод (cast) в long long)
   • Проверяет: является ли x + 4 или x - 4 точным квадратом
   • Возвращает true, если условие выполняется, иначе — false

Производительность:
-------------------
• Временная сложность: **O(1)** — только арифметические операции и sqrt
• Память: **O(1)** — не используется массивов или аллокаций
• Диапазон: работает для любых 32-битных целых чисел (и положительных, и отрицательных)

Замечание:
----------
На очень больших числах (за пределами 64 бит) возможны погрешности из-за
ограниченной точности функции `sqrt()` — для таких случаев стоит использовать
библиотеки больших чисел (например, GMP, Boost.Multiprecision и т.п.).

Пример использования:
---------------------
Ввод: 21
Вывод: 21 — число Фибоначчи

Ввод: 22
Вывод: 22 — НЕ является числом Фибоначчи

------------------------------------------------------------
*/


/*
Для больших чисел - Fast Doubling (O(log n), без матриц)

pair<cpp_int, cpp_int> fib_doubling(int n) {
    if (n == 0) return {0, 1};
    auto [a, b] = fib_doubling(n / 2);
    cpp_int c = a * (2 * b - a);
    cpp_int d = a * a + b * b;
    return (n % 2 == 0) ? pair{c, d} : pair{d, c + d};
}

Возвращает:
first = F(n),
second = F(n+1)
*/